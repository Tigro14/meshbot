#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Gestionnaire de connexion s√©rie Meshtastic avec reconnexion automatique - VERSION 2.1
‚úÖ CORRECTIF DEADLOCK: Thread monitoring d√©marr√© apr√®s lib√©ration du lock

Version am√©lior√©e qui:
- Surveille activement l'√©tat du port s√©rie
- S'abonne aux √©v√©nements Meshtastic
- D√©tecte les exceptions lors de l'envoi
- V√©rifie p√©riodiquement la sant√© de la connexion
- ‚úÖ FIX: Pas de deadlock au d√©marrage
"""

import time
import threading
import meshtastic.serial_interface
from utils import debug_print, error_print, info_print


class SafeSerialConnection:
    """
    Gestionnaire de connexion s√©rie Meshtastic avec reconnexion automatique v2.1
    
    Am√©liorations par rapport √† v2:
    - ‚úÖ CORRECTIF DEADLOCK: Le thread de monitoring d√©marre apr√®s lib√©ration du lock
    - D√©tection active des d√©connexions (teste le port s√©rie)
    - Surveillance plus fr√©quente
    - Meilleure gestion des erreurs d'envoi
    - Abonnement aux √©v√©nements Meshtastic
    """
    
    def __init__(self, port, max_retries=5, retry_delay=5, max_retry_delay=60, auto_reconnect=True):
        self.port = port
        self.max_retries = max_retries
        self.retry_delay = retry_delay
        self.max_retry_delay = max_retry_delay
        self.auto_reconnect = auto_reconnect
        
        self.interface = None
        self._connected = False
        self._lock = threading.Lock()
        self._reconnect_thread = None
        self._stop_reconnect = False
        self._connection_lost_time = None
        self._retry_count = 0
        self._disconnect_detected = False
        
    def _on_meshtastic_connection_lost(self, interface, reason=None):
        """Callback appel√© par Meshtastic quand la connexion est perdue"""
        info_print(f"üîå Meshtastic signale une d√©connexion: {reason}")
        with self._lock:
            if self._connected:
                error_print("‚ö†Ô∏è  D√©connexion d√©tect√©e par Meshtastic")
                self._connected = False
                self._disconnect_detected = True
                self._connection_lost_time = time.time()
                self._retry_count = 0
        
    def connect(self):
        """√âtablir la connexion s√©rie initiale - ‚úÖ VERSION CORRIG√âE"""
        connection_success = False
        
        with self._lock:
            if self._connected and self.interface:
                debug_print("D√©j√† connect√©")
                return True
            
            for attempt in range(1, self.max_retries + 1):
                try:
                    info_print(f"üîå Tentative connexion s√©rie {attempt}/{self.max_retries}: {self.port}")
                    
                    # Fermer toute connexion existante
                    if self.interface:
                        try:
                            self.interface.close()
                        except:
                            pass
                        self.interface = None
                    
                    # Nouvelle connexion
                    self.interface = meshtastic.serial_interface.SerialInterface(self.port)
                    time.sleep(3)  # Attendre stabilisation
                    
                    # S'abonner aux √©v√©nements de d√©connexion
                    try:
                        from pubsub import pub
                        pub.subscribe(self._on_meshtastic_connection_lost, "meshtastic.connection.lost")
                        debug_print("‚úÖ Abonn√© aux √©v√©nements Meshtastic")
                    except Exception as e:
                        debug_print(f"‚ö†Ô∏è  Impossible de s'abonner: {e}")
                    
                    # V√©rifier que l'interface est fonctionnelle
                    if self._test_connection():
                        self._connected = True
                        self._disconnect_detected = False
                        self._retry_count = 0
                        info_print(f"‚úÖ Connexion s√©rie √©tablie: {self.port}")
                        connection_success = True
                        break  # ‚úÖ Sortir de la boucle de tentatives
                    else:
                        info_print(f"Interface cr√©√©e mais non fonctionnelle (tentative {attempt})")
                        
                except Exception as e:
                    error_print(f"‚ùå √âchec connexion s√©rie (tentative {attempt}/{self.max_retries}): {e}")
                    self.interface = None
                    self._connected = False
                    
                    if attempt < self.max_retries:
                        delay = min(self.retry_delay * attempt, self.max_retry_delay)
                        info_print(f"‚è±Ô∏è  Nouvelle tentative dans {delay}s...")
                        time.sleep(delay)
            
            if not connection_success:
                error_print(f"‚ùå Impossible de se connecter apr√®s {self.max_retries} tentatives")
                return False
        
        # ‚úÖ CRITIQUE: D√©marrer la surveillance APR√àS avoir rel√¢ch√© le lock
        # Cela √©vite le deadlock car le thread de monitoring peut maintenant
        # appeler is_connected() sans conflit de lock
        if connection_success and self.auto_reconnect and not self._reconnect_thread:
            self._start_monitor()
        
        return connection_success
    
    def _test_connection(self):
        """Tester si la connexion est vraiment fonctionnelle"""
        if not self.interface:
            return False
        
        try:
            # Test 1: Attributs de base
            if not hasattr(self.interface, 'myInfo'):
                return False
            
            # Test 2: Port s√©rie sous-jacent
            if hasattr(self.interface, '_stream'):
                stream = self.interface._stream
                if hasattr(stream, 'is_open') and not stream.is_open:
                    return False
                
                # V√©rifier que le port existe
                if hasattr(stream, 'port'):
                    import os
                    if not os.path.exists(stream.port):
                        return False
            
            # Test 3: M√©thode isConnected si disponible
            if hasattr(self.interface, 'isConnected'):
                if callable(self.interface.isConnected):
                    return self.interface.isConnected()
                else:
                    return self.interface.isConnected
            
            return True
            
        except Exception as e:
            debug_print(f"Test connexion √©chou√©: {e}")
            return False
    
    def get_interface(self):
        """Obtenir l'interface s√©rie (reconnecte si n√©cessaire)"""
        with self._lock:
            if not self._connected or not self.interface or self._disconnect_detected:
                info_print("Interface non connect√©e, tentative de reconnexion...")
                self.connect()
            
            return self.interface if self._connected else None
    
    def is_connected(self):
        """V√©rifier si la connexion est active"""
        with self._lock:
            # V√©rification rapide de l'√©tat
            if not self._connected or not self.interface:
                return False
            
            # Si d√©connexion d√©tect√©e, retourner False
            if self._disconnect_detected:
                return False
            
            # Test p√©riodique (max 1x par seconde)
            current_time = time.time()
            if not hasattr(self, '_last_test_time'):
                self._last_test_time = 0
            
            if current_time - self._last_test_time > 1.0:
                self._last_test_time = current_time
                if not self._test_connection():
                    self._connected = False
                    self._disconnect_detected = True
                    return False
            
            return True
    
    def _start_monitor(self):
        """D√©marrer le thread de surveillance"""
        if self._reconnect_thread and self._reconnect_thread.is_alive():
            return
        
        self._stop_reconnect = False
        self._reconnect_thread = threading.Thread(
            target=self._monitor_connection,
            daemon=True,
            name="SerialMonitor"
        )
        self._reconnect_thread.start()
        debug_print("üîç Surveillance de connexion s√©rie d√©marr√©e")
    
    def _monitor_connection(self):
        """Thread de surveillance - v√©rifie activement la connexion"""
        check_interval = 2  # V√©rifier toutes les 2 secondes
        
        while not self._stop_reconnect:
            time.sleep(check_interval)
            
            try:
                # V√©rifier l'√©tat de la connexion
                connected = self.is_connected()
                
                # Si d√©connect√© et auto-reconnect activ√©
                if not connected and self.auto_reconnect:
                    with self._lock:
                        if not self._connected or self._disconnect_detected:
                            self._retry_count += 1
                            
                            if self._retry_count == 1:
                                error_print("‚ö†Ô∏è  Connexion s√©rie perdue d√©tect√©e par le moniteur")
                                if not self._connection_lost_time:
                                    self._connection_lost_time = time.time()
                    
                    info_print(f"üîÑ Tentative de reconnexion #{self._retry_count}...")
                    
                    # Rel√¢cher le lock pendant la reconnexion
                    if self.connect():
                        if self._connection_lost_time:
                            downtime = time.time() - self._connection_lost_time
                            info_print(f"‚úÖ Reconnexion r√©ussie apr√®s {downtime:.1f}s d'interruption")
                            self._connection_lost_time = None
                    else:
                        # Backoff exponentiel
                        delay = min(self.retry_delay * (2 ** min(self._retry_count, 5)), self.max_retry_delay)
                        info_print(f"‚è±Ô∏è  Prochaine tentative dans {delay}s...")
                        time.sleep(delay - check_interval)
                
            except Exception as e:
                error_print(f"Erreur dans le thread de surveillance: {e}")
    
    def close(self):
        """Fermer proprement la connexion s√©rie"""
        info_print("üîå Fermeture connexion s√©rie...")
        
        # Arr√™ter la surveillance
        self._stop_reconnect = True
        if self._reconnect_thread:
            self._reconnect_thread.join(timeout=2)
        
        # Se d√©sabonner des √©v√©nements
        try:
            from pubsub import pub
            pub.unsubscribe(self._on_meshtastic_connection_lost, "meshtastic.connection.lost")
        except:
            pass
        
        with self._lock:
            if self.interface:
                try:
                    self.interface.close()
                    info_print("‚úÖ Connexion s√©rie ferm√©e")
                except Exception as e:
                    error_print(f"Erreur fermeture connexion: {e}")
                finally:
                    self.interface = None
                    self._connected = False
    
    def __del__(self):
        """Destructeur"""
        self.close()


# ========================================
# FONCTIONS HELPER
# ========================================

def test_serial_connection(port, timeout=10):
    """Tester rapidement une connexion s√©rie"""
    start = time.time()
    try:
        info_print(f"üß™ Test connexion s√©rie: {port}")
        interface = meshtastic.serial_interface.SerialInterface(port)
        time.sleep(3)
        
        if hasattr(interface, 'myInfo'):
            elapsed = time.time() - start
            interface.close()
            return True, f"‚úÖ Connexion OK ({elapsed:.2f}s)", elapsed
        else:
            elapsed = time.time() - start
            interface.close()
            return False, "‚ùå Interface non fonctionnelle", elapsed
            
    except Exception as e:
        elapsed = time.time() - start
        return False, f"‚ùå Erreur: {str(e)[:100]}", elapsed


if __name__ == "__main__":
    """Tests du module"""
    import sys
    
    if len(sys.argv) < 2:
        print("Usage: python3 safe_serial_connection.py <port>")
        print("Exemple: python3 safe_serial_connection.py /dev/ttyACM0")
        sys.exit(1)
    
    port = sys.argv[1]
    
    print(f"\nüß™ Test SafeSerialConnection v2.1 sur {port}...\n")
    
    manager = SafeSerialConnection(port, auto_reconnect=True)
    
    if manager.connect():
        print(f"‚úÖ Connexion √©tablie")
        print(f"√âtat: {'Connect√©' if manager.is_connected() else 'D√©connect√©'}")
        
        print("\n‚è±Ô∏è  Surveillance active pendant 60s...")
        print("üí° D√©branchez/rebranchez le c√¢ble pour tester la reconnexion\n")
        
        for i in range(60):
            time.sleep(1)
            status = "üü¢ Connect√©" if manager.is_connected() else "üî¥ D√©connect√©"
            print(f"[{i+1:2d}/60] {status}", end='\r')
        
        print(f"\n\nTest termin√©")
        manager.close()
    else:
        print("‚ùå √âchec de connexion")
