#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bot Telegram bridge pour interface avec le bot Meshtastic
VERSION CORRIG√âE - Toutes les commandes via queue
"""

import asyncio
import logging
import json
import time
import os
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Configuration
import sys
sys.path.append('/home/dietpi/bot')  # Ajuster selon votre chemin
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_AUTHORIZED_USERS, TELEGRAM_QUEUE_FILE, TELEGRAM_RESPONSE_FILE, TELEGRAM_COMMAND_TIMEOUT, TELEGRAM_AI_CONFIG

# Configuration logging vers systemd uniquement (pas de fichier s√©par√©)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler()]  # Force vers stdout/stderr pour systemd
)
logger = logging.getLogger(__name__)

class TelegramMeshtasticBridge:
    def __init__(self):
        self.application = None
        self.command_queue = asyncio.Queue()
        self.queue_file = TELEGRAM_QUEUE_FILE
        self.response_file = TELEGRAM_RESPONSE_FILE
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /start"""
        user = update.effective_user
        logger.info(f"Utilisateur {user.username} ({user.id}) d√©marre le bot")
        
        welcome_msg = (
            f"ü§ñ Bot Meshtastic Bridge\n\n"
            f"Salut {user.first_name} !\n\n"
            f"Commandes disponibles:\n"
            f"‚Ä¢ Tapez directement votre message pour parler √† l'IA\n"
            f"‚Ä¢ /power - Info batterie/solaire\n"
            f"‚Ä¢ /rx [page] - N≈ìuds vus par tigrog2\n"
            f"‚Ä¢ /sys - Info syst√®me\n"
            f"‚Ä¢ /echo <message> - Diffuser via tigrog2\n"
            f"‚Ä¢ /nodes <IP> - N≈ìuds d'un h√¥te distant\n"
            f"‚Ä¢ /legend - L√©gende des signaux\n"
            f"‚Ä¢ /help - Aide compl√®te\n\n"
            f"Votre ID: {user.id}"
        )
        
        await update.message.reply_text(welcome_msg)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /help"""
        help_msg = (
            "**Commandes disponibles:**\n\n"
            "**Direct:**\n"
            "‚Ä¢ Message direct ‚Üí Chat IA\n"
            "‚Ä¢ `/power` - Batterie/solaire\n"
            "‚Ä¢ `/rx [page]` - N≈ìuds tigrog2\n"
            "‚Ä¢ `/sys` - Syst√®me Pi5\n"
            "‚Ä¢ `/echo <message>` - Diffuser\n"
            "‚Ä¢ `/nodes <IP>` - N≈ìuds distants\n"
            "‚Ä¢ `/legend` - L√©gende signaux\n\n"
            "**Note:** /my n'est pas disponible depuis Telegram"
        )
        
        await update.message.reply_text(help_msg, parse_mode='Markdown')
    
    def check_authorization(self, user_id):
        """V√©rifier si l'utilisateur est autoris√©"""
        if not TELEGRAM_AUTHORIZED_USERS:
            return True
        return user_id in TELEGRAM_AUTHORIZED_USERS
    
    async def power_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /power"""
        user = update.effective_user
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Non autoris√©")
            return
        
        try:
            response = await self.send_to_meshtastic("/power", user)
            await update.message.reply_text(f"üîã **Power:**\n{response}")
        except Exception as e:
            logger.error(f"Erreur /power: {e}")
            await update.message.reply_text(f"‚ùå Erreur: {str(e)}")
    
    async def rx_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /rx [page]"""
        user = update.effective_user
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Non autoris√©")
            return
        
        # Extraire le num√©ro de page
        page = context.args[0] if context.args else "1"
        command = f"/rx {page}"
        
        try:
            response = await self.send_to_meshtastic(command, user)
            await update.message.reply_text(f"üì° **N≈ìuds:**\n```\n{response}\n```", parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Erreur /rx: {e}")
            await update.message.reply_text(f"‚ùå Erreur: {str(e)}")
    
    async def sys_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /sys"""
        user = update.effective_user
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Non autoris√©")
            return
        
        try:
            response = await self.send_to_meshtastic("/sys", user)
            await update.message.reply_text(f"üñ•Ô∏è **Syst√®me:**\n{response}")
        except Exception as e:
            logger.error(f"Erreur /sys: {e}")
            await update.message.reply_text(f"‚ùå Erreur: {str(e)}")
    
    async def legend_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /legend"""
        user = update.effective_user
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Non autoris√©")
            return
        
        try:
            response = await self.send_to_meshtastic("/legend", user)
            await update.message.reply_text(response)
        except Exception as e:
            logger.error(f"Erreur /legend: {e}")
            await update.message.reply_text(f"‚ùå Erreur: {str(e)}")
    
    async def echo_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /echo"""
        user = update.effective_user
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Non autoris√©")
            return
        
        if not context.args:
            await update.message.reply_text("Usage: /echo <message>\nEx: /echo Salut!")
            return
        
        echo_text = ' '.join(context.args)
        command = f"/echo {echo_text}"
        
        try:
            response = await self.send_to_meshtastic(command, user)
            await update.message.reply_text(f"üì° {response}")
        except Exception as e:
            logger.error(f"Erreur /echo: {e}")
            await update.message.reply_text(f"‚ùå Erreur: {str(e)}")
    
    async def nodes_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /nodes <IP>"""
        user = update.effective_user
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Non autoris√©")
            return
        
        if not context.args:
            await update.message.reply_text("Usage: /nodes <IP>\nEx: /nodes 192.168.1.38")
            return
        
        remote_host = context.args[0]
        command = f"/nodes {remote_host}"
        
        try:
            response = await self.send_to_meshtastic(command, user)
            await update.message.reply_text(f"üì° **N≈ìuds distants:**\n```\n{response}\n```", parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Erreur /nodes: {e}")
            await update.message.reply_text(f"‚ùå Erreur: {str(e)}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """G√©rer les messages texte (raccourci pour /bot)"""
        user = update.effective_user
        message_text = update.message.text
        
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Non autoris√©")
            return
        
        logger.info(f"Message direct de {user.username}: {message_text}")
        
        try:
            command = f"/bot {message_text}"
            response = await self.send_to_meshtastic(command, user)
            await update.message.reply_text(f"ü§ñ {response}")
        except Exception as e:
            logger.error(f"Erreur message: {e}")
            await update.message.reply_text(f"‚ùå Erreur: {str(e)}")
    
    async def send_to_meshtastic(self, command, user):
        """Envoyer une commande au bot Meshtastic via queue"""
        request_id = f"tg_{int(time.time()*1000)}"
        request_data = {
            "id": request_id,
            "command": command,
            "source": "telegram",
            "user": {
                "telegram_id": user.id,
                "username": user.username or user.first_name,
                "first_name": user.first_name
            },
            "timestamp": time.time()
        }
        
        logger.info(f"Envoi commande: {command} (ID: {request_id})")
        
        try:
            # √âcrire la requ√™te dans le fichier de queue
            requests = []
            if os.path.exists(self.queue_file):
                with open(self.queue_file, 'r') as f:
                    try:
                        requests = json.load(f)
                    except json.JSONDecodeError:
                        requests = []
            
            requests.append(request_data)
            
            with open(self.queue_file, 'w') as f:
                json.dump(requests, f)
            
            logger.info(f"Requ√™te {request_id} ajout√©e √† la queue")
            
            # Timeout adapt√© selon le type de commande
            if command.startswith('/bot '):
                timeout = TELEGRAM_AI_CONFIG["timeout"] + 30
                logger.info(f"Attente r√©ponse IA (timeout: {timeout}s)")
            else:
                timeout = TELEGRAM_COMMAND_TIMEOUT
            
            result = await self.wait_for_response(request_id, timeout=timeout)
            logger.info(f"R√©ponse re√ßue: '{result[:100]}...'")
            return result
            
        except Exception as e:
            logger.error(f"Erreur interface: {e}")
            return f"Erreur interface: {str(e)}"
    
    async def wait_for_response(self, request_id, timeout=30):
        """Attendre la r√©ponse du bot Meshtastic"""
        logger.info(f"Attente r√©ponse pour {request_id} (timeout: {timeout}s)")
        start_time = time.time()
        check_interval = 0.5
        
        while (time.time() - start_time) < timeout:
            try:
                if not os.path.exists(self.response_file):
                    await asyncio.sleep(check_interval)
                    continue
                
                with open(self.response_file, 'r') as f:
                    try:
                        responses = json.load(f)
                    except json.JSONDecodeError:
                        await asyncio.sleep(check_interval)
                        continue
                
                if not responses:
                    await asyncio.sleep(check_interval)
                    continue
                
                # Chercher notre r√©ponse
                for i, response in enumerate(responses):
                    if response.get("request_id") == request_id:
                        result = response.get("response", "Pas de r√©ponse")
                        
                        logger.info(f"R√©ponse trouv√©e pour {request_id}")
                        
                        # Supprimer la r√©ponse trait√©e
                        responses.pop(i)
                        with open(self.response_file, 'w') as f:
                            json.dump(responses, f)
                        
                        return result
                
                await asyncio.sleep(check_interval)
                
            except Exception as e:
                logger.error(f"Erreur attente: {e}")
                await asyncio.sleep(check_interval)
                continue
        
        logger.warning(f"TIMEOUT apr√®s {timeout}s pour {request_id}")
        return f"‚è∞ Timeout - pas de r√©ponse apr√®s {timeout}s"
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """Gestionnaire d'erreurs global"""
        logger.error(f"Exception: {context.error}")
        
        if update and hasattr(update, 'message') and update.message:
            await update.message.reply_text("‚ùå Erreur interne du bot")
    
    async def start_bot(self):
        """D√©marrer le bot Telegram"""
        logger.info("D√©marrage du bot Telegram Meshtastic Bridge...")
        
        # Cr√©er l'application
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # Ajouter les handlers
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("power", self.power_command))
        self.application.add_handler(CommandHandler("rx", self.rx_command))
        self.application.add_handler(CommandHandler("sys", self.sys_command))
        self.application.add_handler(CommandHandler("legend", self.legend_command))
        self.application.add_handler(CommandHandler("echo", self.echo_command))
        self.application.add_handler(CommandHandler("nodes", self.nodes_command))
        
        # Handler pour messages texte (raccourci /bot)
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )
        
        # Gestionnaire d'erreurs
        self.application.add_error_handler(self.error_handler)
        
        # D√©marrer le bot
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        logger.info("‚úÖ Bot Telegram d√©marr√© et en √©coute...")
        
        # Garder le bot actif
        try:
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            logger.info("Arr√™t du bot...")
        finally:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()

def main():
    """Point d'entr√©e principal"""
    if TELEGRAM_BOT_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN":
        print("‚ùå Veuillez configurer TELEGRAM_BOT_TOKEN")
        return
    
    bridge = TelegramMeshtasticBridge()
    
    try:
        asyncio.run(bridge.start_bot())
    except KeyboardInterrupt:
        print("\nüõë Arr√™t du bot Telegram")
    except Exception as e:
        logger.error(f"Erreur critique: {e}")

if __name__ == "__main__":
    main()
