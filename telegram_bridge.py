#!/usr/bin/env python3
"""
Bot Telegram bridge pour interface avec le bot Meshtastic
Utilise UNIQUEMENT les chemins d√©finis dans config.py
"""

import asyncio
import logging
import json
import time
import os
import sys
from datetime import datetime

# Utiliser UNIQUEMENT le config.py - pas d'autres chemins cod√©s en dur
try:
    from config import (
        TELEGRAM_BOT_TOKEN, TELEGRAM_AUTHORIZED_USERS, 
        TELEGRAM_QUEUE_FILE, TELEGRAM_RESPONSE_FILE, 
        TELEGRAM_COMMAND_TIMEOUT, REMOTE_NODE_HOST, REMOTE_NODE_NAME
    )
    config_loaded = True
except ImportError as e:
    print(f"‚ùå Erreur import config.py: {e}")
    sys.exit(1)

class TelegramLogFilter(logging.Filter):
    """Filtre les logs bruyants de Telegram pour systemd"""
    
    def filter(self, record):
        message = record.getMessage().lower()
        
        # Messages √† filtrer compl√®tement
        spam_patterns = [
            'getupdates', 'getting updates', 'received update',
            'http request: get', 'http request: post',
            'httpx', 'httpcore', 'urllib3', 'connectionpool',
            'starting new https connection', 'resetting dropped connection'
        ]
        
        for pattern in spam_patterns:
            if pattern in message:
                return False
        
        # Garder les messages importants
        important_keywords = [
            'error', 'exception', 'failed', 'timeout', 'unauthorized',
            'commande', 'd√©marrage', 'arr√™t', 'start de', 'help de', 
            'bot de', 'power de', 'rx de', 'my de', 'sys de', 'echo de', 'legend de'
        ]
        
        for keyword in important_keywords:
            if keyword in message:
                return True
        
        # Pour les libs externes, seulement WARNING+
        if record.name.startswith(('telegram', 'httpx', 'httpcore', 'urllib3')):
            return record.levelno >= logging.WARNING
        
        return True

def setup_clean_logging():
    """Configure logging propre pour systemd (pas de fichiers de log)"""
    
    # Configuration basique pour systemd
    logging.basicConfig(
        format='%(levelname)s - %(message)s',  # Pas besoin de timestamp avec systemd
        level=logging.INFO,
        stream=sys.stdout
    )
    
    # Cr√©er et appliquer le filtre
    log_filter = TelegramLogFilter()
    
    # Appliquer aux loggers bruyants
    noisy_loggers = ['telegram', 'httpx', 'httpcore', 'urllib3', 'telegram.ext']
    for logger_name in noisy_loggers:
        logger_obj = logging.getLogger(logger_name)
        logger_obj.addFilter(log_filter)
        logger_obj.setLevel(logging.WARNING)
    
    return logging.getLogger(__name__)

# Configuration logging
logger = setup_clean_logging()

try:
    from telegram import Update
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
except ImportError as e:
    logger.error(f"‚ùå Modules Telegram manquants: {e}")
    logger.info("üí° Installer: pip install python-telegram-bot==20.7")
    sys.exit(1)

class MeshtasticInterface:
    """Interface pour communiquer avec le bot Meshtastic via les fichiers d√©finis dans config.py"""
    
    def __init__(self):
        # Utiliser UNIQUEMENT les chemins du config.py
        self.queue_file = TELEGRAM_QUEUE_FILE
        self.response_file = TELEGRAM_RESPONSE_FILE
        self._ensure_files_exist()
    
    def _ensure_files_exist(self):
        """Cr√©er les fichiers de communication s'ils n'existent pas"""
        for file_path in [self.queue_file, self.response_file]:
            if not os.path.exists(file_path):
                try:
                    # Cr√©er le r√©pertoire parent si n√©cessaire
                    os.makedirs(os.path.dirname(file_path), exist_ok=True)
                    with open(file_path, 'w') as f:
                        json.dump([], f)
                    logger.debug(f"Fichier cr√©√©: {file_path}")
                except Exception as e:
                    logger.error(f"Erreur cr√©ation {file_path}: {e}")
    
    async def send_command(self, command, user):
        """Envoyer une commande au bot Meshtastic"""
        request_data = {
            "id": f"tg_{int(time.time()*1000)}_{user.id}",
            "command": command,
            "source": "telegram",
            "user": {
                "telegram_id": user.id,
                "username": user.username or user.first_name or "Unknown",
                "first_name": user.first_name or "Unknown"
            },
            "timestamp": time.time()
        }
        
        try:
            # Lire requests existantes
            requests = []
            if os.path.exists(self.queue_file):
                try:
                    with open(self.queue_file, 'r') as f:
                        requests = json.load(f)
                except (json.JSONDecodeError, FileNotFoundError):
                    requests = []
            
            # Ajouter nouvelle request
            requests.append(request_data)
            
            # Sauvegarder dans le fichier d√©fini par config.py
            with open(self.queue_file, 'w') as f:
                json.dump(requests, f)
            
            logger.info(f"üì° Commande: {command} pour {user.username or user.first_name}")
            
            # Attendre la r√©ponse
            return await self._wait_for_response(request_data["id"], TELEGRAM_COMMAND_TIMEOUT)
            
        except Exception as e:
            logger.error(f"Erreur envoi commande: {e}")
            return f"‚ùå Erreur: {str(e)[:50]}"
    
    async def _wait_for_response(self, request_id, timeout):
        """Attendre la r√©ponse du bot Meshtastic dans le fichier d√©fini par config.py"""
        start_time = time.time()
        
        while (time.time() - start_time) < timeout:
            try:
                if os.path.exists(self.response_file):
                    with open(self.response_file, 'r') as f:
                        try:
                            responses = json.load(f)
                        except json.JSONDecodeError:
                            responses = []
                    
                    # Chercher notre r√©ponse
                    for i, response in enumerate(responses):
                        if response.get("request_id") == request_id:
                            result = response.get("response", "Pas de r√©ponse")
                            
                            # Supprimer la r√©ponse trait√©e
                            responses.pop(i)
                            with open(self.response_file, 'w') as f:
                                json.dump(responses, f)
                            
                            return result
                
                await asyncio.sleep(1)
                
            except Exception:
                await asyncio.sleep(1)
        
        return "‚è∞ Timeout - pas de r√©ponse du bot Meshtastic"

class TelegramMeshtasticBridge:
    def __init__(self):
        self.application = None
        self.mesh_interface = MeshtasticInterface()
        
        # Validation du token depuis config.py
        if TELEGRAM_BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
            logger.error("‚ùå TELEGRAM_BOT_TOKEN non configur√© dans config.py")
            raise ValueError("Token Telegram manquant dans config.py")
        
        logger.info("‚úÖ Bot Telegram initialis√©")
    
    def check_authorization(self, user_id):
        """V√©rifier autorisation utilisateur selon config.py"""
        if not TELEGRAM_AUTHORIZED_USERS:
            return True
        return user_id in TELEGRAM_AUTHORIZED_USERS
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /start"""
        user = update.effective_user
        logger.info(f"üë§ /start de {user.username or user.first_name} ({user.id})")
        
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Acc√®s non autoris√©")
            return
        
        welcome_msg = (
            f"ü§ñ **Bot Meshtastic Bridge**\n\n"
            f"Salut {user.first_name} !\n\n"
            f"**Commandes directes:**\n"
            f"‚Ä¢ `/bot <question>` - Chat avec l'IA\n"
            f"‚Ä¢ `/power` - Info batterie/solaire\n"
            f"‚Ä¢ `/rx [page]` - N≈ìuds vus par {REMOTE_NODE_NAME}\n"
            f"‚Ä¢ `/my` - Vos signaux radio\n"
            f"‚Ä¢ `/sys` - Info syst√®me Pi5\n"
            f"‚Ä¢ `/echo <message>` - Echo via {REMOTE_NODE_NAME}\n"
            f"‚Ä¢ `/legend` - L√©gende des signaux\n"
            f"‚Ä¢ `/help` - Aide compl√®te\n\n"
            f"**Raccourci:** Tapez directement votre message pour chat IA\n\n"
            f"Votre ID: `{user.id}`"
        )
        
        await update.message.reply_text(welcome_msg, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /help"""
        user = update.effective_user
        logger.info(f"‚ùì /help de {user.username or user.first_name}")
        
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Acc√®s non autoris√©")
            return
        
        help_msg = (
            "ü§ñ **Commandes disponibles:**\n\n"
            "**Commandes principales:**\n"
            "‚Ä¢ `/bot <question>` - Chat avec l'IA\n"
            "‚Ä¢ `/power` - Info batterie/solaire\n"
            f"‚Ä¢ `/rx [page]` - N≈ìuds vus par {REMOTE_NODE_NAME}\n"
            "‚Ä¢ `/my` - Vos signaux radio\n"
            "‚Ä¢ `/sys` - Info syst√®me Pi5\n"
            f"‚Ä¢ `/echo <message>` - Diffuser via {REMOTE_NODE_NAME}\n"
            "‚Ä¢ `/legend` - L√©gende des signaux\n\n"
            "**Format raccourci:**\n"
            "Tapez directement votre message pour `/bot <message>`"
        )
        
        await update.message.reply_text(help_msg, parse_mode='Markdown')
    
    async def bot_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /bot - Chat IA direct"""
        user = update.effective_user
        
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Acc√®s non autoris√©")
            return
        
        if not context.args:
            await update.message.reply_text("**Usage:** `/bot <question>`\n**Exemple:** `/bot Salut !`", parse_mode='Markdown')
            return
        
        question = ' '.join(context.args)
        logger.info(f"ü§ñ /bot de {user.username or user.first_name}: {question[:50]}...")
        
        processing_msg = await update.message.reply_text("ü§ñ L'IA r√©fl√©chit...")
        
        try:
            response = await self.mesh_interface.send_command(f"/bot {question}", user)
            if len(response) > 4000:
                response = response[:3950] + "\n\n...(tronqu√©)"
            
            await processing_msg.edit_text(f"ü§ñ **IA:**\n{response}")
            
        except Exception as e:
            logger.error(f"Erreur /bot: {e}")
            await processing_msg.edit_text(f"‚ùå Erreur: {str(e)[:200]}")
    
    async def power_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /power direct"""
        user = update.effective_user
        
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Acc√®s non autoris√©")
            return
        
        logger.info(f"üîã /power de {user.username or user.first_name}")
        processing_msg = await update.message.reply_text("üîã R√©cup√©ration donn√©es...")
        
        try:
            response = await self.mesh_interface.send_command("/power", user)
            await processing_msg.edit_text(f"üîã **Alimentation:**\n```\n{response}\n```", parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Erreur /power: {e}")
            await processing_msg.edit_text(f"‚ùå Erreur: {str(e)[:200]}")
    
    async def rx_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /rx direct"""
        user = update.effective_user
        
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Acc√®s non autoris√©")
            return
        
        page = ""
        if context.args:
            page = f" {context.args[0]}"
        
        logger.info(f"üì° /rx{page} de {user.username or user.first_name}")
        processing_msg = await update.message.reply_text("üì° R√©cup√©ration n≈ìuds...")
        
        try:
            command = f"/rx{page}" if page else "/rx"
            response = await self.mesh_interface.send_command(command, user)
            await processing_msg.edit_text(f"üì° **N≈ìuds:**\n```\n{response}\n```", parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Erreur /rx: {e}")
            await processing_msg.edit_text(f"‚ùå Erreur: {str(e)[:200]}")
    
    async def my_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /my direct"""
        user = update.effective_user
        
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Acc√®s non autoris√©")
            return
        
        logger.info(f"üì∂ /my de {user.username or user.first_name}")
        processing_msg = await update.message.reply_text("üì∂ V√©rification signal...")
        
        try:
            response = await self.mesh_interface.send_command("/my", user)
            await processing_msg.edit_text(f"üì∂ **Votre signal:**\n{response}")
        except Exception as e:
            logger.error(f"Erreur /my: {e}")
            await processing_msg.edit_text(f"‚ùå Erreur: {str(e)[:200]}")
    
    async def sys_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /sys direct"""
        user = update.effective_user
        
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Acc√®s non autoris√©")
            return
        
        logger.info(f"üñ•Ô∏è /sys de {user.username or user.first_name}")
        processing_msg = await update.message.reply_text("üñ•Ô∏è Info syst√®me...")
        
        try:
            response = await self.mesh_interface.send_command("/sys", user)
            await processing_msg.edit_text(f"üñ•Ô∏è **Syst√®me:**\n```\n{response}\n```", parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Erreur /sys: {e}")
            await processing_msg.edit_text(f"‚ùå Erreur: {str(e)[:200]}")
    
    async def echo_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /echo direct"""
        user = update.effective_user
        
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Acc√®s non autoris√©")
            return
        
        if not context.args:
            await update.message.reply_text("**Usage:** `/echo <message>`\n**Exemple:** `/echo Salut le r√©seau !`", parse_mode='Markdown')
            return
        
        echo_text = ' '.join(context.args)
        logger.info(f"üì¢ /echo de {user.username or user.first_name}: {echo_text}")
        
        try:
            response = await self.mesh_interface.send_command(f"/echo {echo_text}", user)
            await update.message.reply_text(f"üì¢ **Echo diffus√©:**\n`{user.first_name}: {echo_text}`", parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Erreur /echo: {e}")
            await update.message.reply_text(f"‚ùå Erreur echo: {str(e)[:200]}")
    
    async def legend_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /legend direct"""
        user = update.effective_user
        
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Acc√®s non autoris√©")
            return
        
        logger.info(f"üîç /legend de {user.username or user.first_name}")
        
        try:
            response = await self.mesh_interface.send_command("/legend", user)
            await update.message.reply_text(f"üîç **L√©gende:**\n{response}")
        except Exception as e:
            logger.error(f"Erreur /legend: {e}")
            await update.message.reply_text(f"‚ùå Erreur: {str(e)[:200]}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Messages texte = raccourci pour /bot"""
        user = update.effective_user
        message_text = update.message.text
        
        if not self.check_authorization(user.id):
            await update.message.reply_text("‚ùå Acc√®s non autoris√©")
            return
        
        logger.info(f"üí¨ Message de {user.username or user.first_name}: {message_text[:50]}...")
        
        processing_msg = await update.message.reply_text("ü§ñ L'IA r√©fl√©chit...")
        
        try:
            response = await self.mesh_interface.send_command(f"/bot {message_text}", user)
            if len(response) > 4000:
                response = response[:3950] + "\n\n...(tronqu√©)"
            
            await processing_msg.edit_text(f"ü§ñ **IA:**\n{response}")
            
        except Exception as e:
            logger.error(f"Erreur message direct: {e}")
            await processing_msg.edit_text(f"‚ùå Erreur: {str(e)[:200]}")
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """Gestionnaire d'erreurs global"""
        logger.error(f"Exception Telegram: {context.error}")
        
        if update and hasattr(update, 'message') and update.message:
            try:
                await update.message.reply_text("‚ùå Erreur interne. Veuillez r√©essayer.")
            except:
                pass
    
    async def start_bot(self):
        """D√©marrer le bot Telegram"""
        logger.info("üöÄ D√©marrage du bot Telegram Meshtastic Bridge")
        
        try:
            # Cr√©er l'application avec le token du config.py
            self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
            
            # Ajouter TOUS les handlers de commandes directes
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("bot", self.bot_command))
            self.application.add_handler(CommandHandler("power", self.power_command))
            self.application.add_handler(CommandHandler("rx", self.rx_command))
            self.application.add_handler(CommandHandler("my", self.my_command))
            self.application.add_handler(CommandHandler("sys", self.sys_command))
            self.application.add_handler(CommandHandler("echo", self.echo_command))
            self.application.add_handler(CommandHandler("legend", self.legend_command))
            
            # Handler pour messages texte (raccourci /bot)
            self.application.add_handler(
                MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
            )
            
            # Gestionnaire d'erreurs
            self.application.add_error_handler(self.error_handler)
            
            # D√©marrer le bot
            await self.application.initialize()
            await self.application.start()
            
            await self.application.updater.start_polling(
                poll_interval=2.0,
                timeout=20,
                bootstrap_retries=3,
                read_timeout=15,
                write_timeout=15,
                connect_timeout=15,
                pool_timeout=15
            )
            
            logger.info("‚úÖ Bot Telegram op√©rationnel")
            
            # Maintenir le bot actif
            try:
                await asyncio.Future()  # Run forever
            except (KeyboardInterrupt, SystemExit):
                logger.info("üì¥ Arr√™t demand√©")
                
        except Exception as e:
            logger.error(f"Erreur fatale: {e}")
            raise
        finally:
            # Nettoyage
            if self.application:
                try:
                    await self.application.updater.stop()
                    await self.application.stop()
                    await self.application.shutdown()
                except:
                    pass

def main():
    """Point d'entr√©e principal"""
    
    # Validation du token depuis config.py
    if TELEGRAM_BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("‚ùå Token Telegram non configur√© dans config.py")
        logger.info("üí° Configurez TELEGRAM_BOT_TOKEN dans config.py")
        return 1
    
    bridge = TelegramMeshtasticBridge()
    
    try:
        logger.info("üåü Lancement...")
        asyncio.run(bridge.start_bot())
        
    except KeyboardInterrupt:
        logger.info("üõë Arr√™t manuel")
        return 0
        
    except Exception as e:
        logger.error(f"üí• Erreur critique: {e}")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
